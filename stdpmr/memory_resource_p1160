// memory_resource_p1160                                              -*-C++-*-
#ifndef BLOOMBERGLP_STD_TEST_RESOURCE_P1160_INCLUDED
#define BLOOMBERGLP_STD_TEST_RESOURCE_P1160_INCLUDED

#include <memory_resource>

#include <atomic>
#include <mutex>
#include <new>
#include <string_view>

#include <cstdio>
#include <cassert>

namespace std::pmr {

struct test_resource_list;

class test_resource : public memory_resource {

    string_view         m_name_{};

    atomic_int          m_no_abort_flag_{ false };
    atomic_int          m_quiet_flag_{ false };
    atomic_int          m_verbose_flag_{ false };
    atomic_llong        m_allocation_limit_{ -1 };

    atomic_llong        m_allocations_{ 0 };
    atomic_llong        m_deallocations_{ 0 };
    atomic_llong        m_mismatches_{ 0 };
    atomic_llong        m_bounds_errors_{ 0 };
    atomic_llong        m_bad_deallocate_params_{ 0 };

    atomic_llong        m_blocks_in_use_{ 0 };
    atomic_llong        m_max_blocks_{ 0 };
    atomic_llong        m_total_blocks_{ 0 };

    atomic_size_t       m_bytes_in_use_{ 0 };
    atomic_llong        m_max_bytes_{ 0 };
    atomic_size_t       m_total_bytes_{ 0 };

    atomic_size_t       m_last_allocated_num_bytes_{ 0 };
    atomic_size_t       m_last_allocated_alignment_{ 0 };
    atomic<void *>      m_last_allocated_address_{ nullptr };

    atomic_size_t       m_last_deallocated_num_bytes_{ 0 };
    atomic_size_t       m_last_deallocated_alignment_{ 0 };
    atomic<void *>      m_last_deallocated_address_{ nullptr };

    test_resource_list *m_list_{};

    mutable mutex       m_lock_{};

    memory_resource    *m_pmr_{};

private:
    [[nodiscard]] void *do_allocate(size_t bytes, size_t alignment) override;

    void do_deallocate(void *p, size_t bytes, size_t alignment) override;

    bool do_is_equal(const memory_resource& that) const noexcept override;

public:
    test_resource(const test_resource&) = delete;
    test_resource& operator=(const test_resource&) = delete;

    test_resource();
    explicit test_resource(memory_resource *pmrp);
    explicit test_resource(const char *name);
    explicit test_resource(string_view name);
    explicit test_resource(bool verbose);
    test_resource(string_view name, memory_resource *pmrp);
    test_resource(const char *name, memory_resource *pmrp);
    test_resource(bool verbose, memory_resource *pmrp);
    test_resource(string_view name, bool verbose);
    test_resource(const char *name, bool verbose);
    test_resource(string_view name, bool verbose, memory_resource *pmrp);
    test_resource(const char *name, bool verbose, memory_resource *pmrp);

    ~test_resource();

    void set_allocation_limit(long long limit) noexcept
    {
        m_allocation_limit_.store(limit, memory_order_relaxed);
    }

    void set_no_abort(bool is_no_abort) noexcept
    {
        m_no_abort_flag_.store(is_no_abort, memory_order_relaxed);
    }

    void set_quiet(bool is_quiet) noexcept
    {
        m_quiet_flag_.store(is_quiet, memory_order_relaxed);
    }

    void set_verbose(bool is_verbose) noexcept
    {
        m_verbose_flag_.store(is_verbose, memory_order_relaxed);
    }

    long long allocation_limit() const noexcept
    {
        return m_allocation_limit_.load(memory_order_relaxed);
    }

    bool is_no_abort() const noexcept
    {
        return m_no_abort_flag_.load(memory_order_relaxed);
    }

    bool is_quiet() const noexcept
    {
        return m_quiet_flag_.load(memory_order_relaxed);
    }

    bool is_verbose() const noexcept
    {
        return m_verbose_flag_.load(memory_order_relaxed);
    }

    string_view name() const noexcept
    {
        return m_name_;
    }

    memory_resource* upstream_resource() const noexcept
    {
        return m_pmr_;
    }

    void *last_allocated_address() const noexcept
    {
        return m_last_allocated_address_.load(memory_order_relaxed);
    }

    size_t last_allocated_num_bytes() const noexcept
    {
        return m_last_allocated_num_bytes_.load(memory_order_relaxed);
    }

    size_t last_allocated_aligment() const noexcept
    {
        return m_last_allocated_alignment_.load(memory_order_relaxed);
    }

    void *last_deallocated_address() const noexcept
    {
        return m_last_deallocated_address_.load(memory_order_relaxed);
    }

    size_t last_deallocated_num_bytes() const noexcept
    {
        return m_last_deallocated_num_bytes_.load(memory_order_relaxed);
    }

    size_t last_deallocated_aligment() const noexcept
    {
        return m_last_deallocated_alignment_.load(memory_order_relaxed);
    }

    long long allocations() const noexcept
    {
        return m_allocations_.load(memory_order_relaxed);
    }

    long long deallocations() const noexcept
    {
        return m_deallocations_.load(memory_order_relaxed);
    }

    long long blocks_in_use() const noexcept
    {
        return m_blocks_in_use_.load(memory_order_relaxed);
    }

    long long max_blocks() const noexcept
    {
        return m_max_blocks_.load(memory_order_relaxed);
    }

    long long total_blocks() const noexcept
    {
        return m_total_blocks_.load(memory_order_relaxed);
    }

    long long bounds_errors() const noexcept
    {
        return m_bounds_errors_.load(memory_order_relaxed);
    }

    long long bad_deallocate_params() const noexcept
    {
        return m_bad_deallocate_params_.load(memory_order_relaxed);
    }

    long long bytes_in_use() const noexcept
    {
        return m_bytes_in_use_.load(memory_order_relaxed);
    }

    long long max_bytes() const noexcept
    {
        return m_max_bytes_.load(memory_order_relaxed);
    }

    long long total_bytes() const noexcept
    {
        return m_total_bytes_.load(memory_order_relaxed);
    }

    long long mismatches() const noexcept
    {
        return m_mismatches_.load(memory_order_relaxed);
    }

    void print() const noexcept;

    bool has_errors() const noexcept
    {
        return mismatches() != 0 || bounds_errors() != 0 ||
               bad_deallocate_params() != 0;
    }

    bool has_allocations() const noexcept
    {
        return blocks_in_use() > 0 || bytes_in_use() > 0;
    }

    long long status() const noexcept;
};


class test_resource_exception : public ::std::bad_alloc {

    test_resource *m_originating_;
    size_t         m_size_;
    size_t         m_alignment_;

  public:
    test_resource_exception(test_resource *originating,
                            size_t         size,
                            size_t         alignment) noexcept
    : m_originating_(originating)
    , m_size_(size)
    , m_alignment_(alignment)
    {
    }

    const char *what() const noexcept override
    {
        return "std::pmr::test_resource_exception";
    }

    test_resource *originating_resource() const noexcept
    {
        return m_originating_;
    }

    size_t size() const noexcept
    {
        return m_size_;
    }

    size_t alignment() const noexcept
    {
        return m_alignment_;
    }
};


class test_resource_monitor {

    long long            m_initial_in_use_;
    long long            m_initial_max_;
    long long            m_initial_total_;
    const test_resource& m_monitored_;

  public:
    explicit test_resource_monitor(const test_resource& monitored) noexcept
    : m_monitored_(monitored)
    {
        reset();
    }
    explicit test_resource_monitor(test_resource&&) = delete;
      // To avoid binding the const ref arg to a temporary (above).

    void reset() noexcept
    {
        m_initial_in_use_ = m_monitored_.blocks_in_use();
        m_initial_max_    = m_monitored_.max_blocks();
        m_initial_total_  = m_monitored_.total_blocks();
    }

    bool is_in_use_down() const noexcept
    {
        return m_monitored_.blocks_in_use() < m_initial_in_use_;
    }

    bool is_in_use_same() const noexcept
    {
        return m_monitored_.blocks_in_use() == m_initial_in_use_;
    }

    bool is_in_use_up() const noexcept
    {
        return m_monitored_.blocks_in_use() > m_initial_in_use_;
    }

    bool is_max_same() const noexcept
    {
        return m_initial_max_ == m_monitored_.max_blocks();
    }

    bool is_max_up() const noexcept
    {
        return m_monitored_.max_blocks() != m_initial_max_;
    }

    bool is_total_same() const noexcept
    {
        return m_monitored_.total_blocks() == m_initial_total_;
    }

    bool is_total_up() const noexcept
    {
        return m_monitored_.total_blocks() != m_initial_total_;
    }

    long long delta_block_in_use() const noexcept
    {
        return m_monitored_.blocks_in_use() - m_initial_in_use_;
    }

    long long delta_max_blocks() const noexcept
    {
        return m_monitored_.max_blocks() - m_initial_max_;
    }

    long long delta_total_blocks() const noexcept
    {
        return m_monitored_.total_blocks() - m_initial_total_;
    }
};


template <class CODE_BLOCK>
void exception_test_loop(test_resource& pmrp, CODE_BLOCK codeBlock)
{
    for (long long exceptionCounter = 0; true; ++exceptionCounter) {
        try {
            pmrp.set_allocation_limit(exceptionCounter);
            codeBlock(pmrp);
            pmrp.set_allocation_limit(-1);
            return;
        } catch (const test_resource_exception& e) {
            if (e.originating_resource() != &pmrp) {
                printf("\t*** test_resource_exception"
                       " from unexpected test resource: %p %.*s ***\n",
                       e.originating_resource(),
                       static_cast<int>(
                                    e.originating_resource()->name().length()),
                       e.originating_resource()->name().data());
                throw;
            }
            else if (pmrp.is_verbose()) {
                printf("\t*** test_resource_exception: "
                       "alloc limit = %lld, last alloc size = %zu, "
                       "align = %zu ***\n",
                       exceptionCounter,
                       e.size(),
                       e.alignment());
            }
        }
    }
}


class [[maybe_unused]] default_resource_guard {
    memory_resource * m_old_resource;

  public:
    explicit default_resource_guard(std::pmr::memory_resource * newDefault)
    {
        assert(newDefault != nullptr);
        m_old_resource = set_default_resource(newDefault);
    }

    default_resource_guard(const default_resource_guard&) = delete;

    default_resource_guard& operator=(const default_resource_guard&) = delete;

    ~default_resource_guard()
    {
        set_default_resource(m_old_resource);
    }
};

template<class ValueType = byte>
class polymorphic_allocator_P0339R5 : public polymorphic_allocator<ValueType> {
    // See Pablo Halpern, Dietmar Kuehl (2018). P0339R5 polymorphic_allocator<>
    // as a vocabulary type
    // http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2018/p0339r5.pdf

    memory_resource *_Resource()
    {
        return *reinterpret_cast<memory_resource **>(this);
    }

public:
    template<class>
        friend class polymorphic_allocator_P0339R4;

    using value_type = ValueType;

    using polymorphic_allocator<ValueType>::polymorphic_allocator;

    polymorphic_allocator_P0339R5&
        operator=(const polymorphic_allocator_P0339R5&) = delete;

    [[nodiscard]]
    void *allocate_bytes(const size_t bytes,
                         const size_t alignment = alignof(max_align_t))
    {
        return (_Resource()->allocate(bytes, alignment));
    }

    void deallocate_bytes(void *const  ptr,
                          const size_t bytes,
                          const size_t alignment = alignof(max_align_t))
    {
        return (_Resource()->deallocate(ptr, bytes, alignment));
    }

    template <class ObjectType>
    [[nodiscard]] ObjectType *allocate_object(const size_t count = 1)
    {
        return  static_cast<ObjectType *>(
              allocate_bytes(count * sizeof(ObjectType), alignof(ObjectType)));
    }

    template <class ObjectType>
    void deallocate_object(ObjectType *ptr, const size_t count = 1)
    {
        deallocate_bytes(ptr, count * sizeof(ObjectType), alignof(ObjectType));
    }

    template <class ObjectType, class... ArgTypes>
    [[nodiscard]] ObjectType * new_object(ArgTypes&&... args)
    {
        void *ptr = allocate_object<ObjectType>();
        try
        {
            construct(ptr, std::forward<ArgTypes>(args)...);
        }
        catch (...)
        {
            _Resource()->deallocate(ptr,
                                    sizeof(ObjectType),
                                    alignof(ObjectType));
            throw;
        }
    }

    template <class ObjectType>
    void delete_object(ObjectType *ptr)
    {
        destroy(ptr);
        deallocate_object(ptr);
    }
};

} // close namespace

#endif

// ----------------------------------------------------------------------------
// Copyright 2018 Bloomberg Finance L.P.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
// ----------------------------- END-OF-FILE ----------------------------------
